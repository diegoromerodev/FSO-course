{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","reportWebVitals.js","index.js"],"names":["note","toggleImportance","label","important","className","content","onClick","message","baseUrl","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","axios","get","then","res","data","notesToShow","filter","id","newObject","editedNote","put","notesData","map","noteEl","catch","error","setTimeout","n","Notification","Note","onSubmit","e","preventDefault","noteObject","Math","random","date","Date","toISOString","length","post","concat","value","onChange","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b444ecc1.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default ({note, toggleImportance}) => {\n    const label = note.important ? \"make not important\" : \"make important\"\n    return (\n    <li className=\"note\">\n        {note.content}\n        <button onClick={toggleImportance}>{label}</button>\n    </li>\n    )\n}","import React from \"react\"\n\nexport default ({message}) => {\n    if (message === null) return null;\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\nexport const getAll = () => {\n  return axios.get(baseUrl).then(res => res.data)\n}\n\nexport const create = newObject => {\n  return axios.post(baseUrl, newObject).then(res => res.data)\n}\n\nexport const update = (id, newObject) => {\n  return axios.put(`${baseUrl}/${id}`, newObject).then(res => res.data)\n}","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport { create, getAll, update } from './services/notes';\n\nconst Footer = () => {\n    const footerStyle = {\n      color: 'green',\n      fontStyle: 'italic',\n      fontSize: 16\n    }\n    return (\n      <div style={footerStyle}>\n        <br />\n        <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n      </div>\n    )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState(\"a new note...\")\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    const hook = () => {\n        getAll()\n        .then(setNotes)\n    }\n\n    useEffect(hook, [])\n\n    const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n    const addNote = (e) => {\n        e.preventDefault()\n        const noteObject = {\n            content: newNote,\n            important: Math.random() < 0.5,\n            date: new Date().toISOString(),\n            id: notes.length + 1,\n        }\n        create(noteObject).then(() => {\n            setNotes(notes.concat(noteObject));\n            setNewNote(\"\")\n        })\n    }\n\n    const handleChange = (e) => {\n        setNewNote(e.target.value);\n    }\n\n    const showSome = () => setShowAll(!showAll)\n\n    const toggleImportance = (note) => {\n        const editedNote = {...note, important: !note.important}\n        update(editedNote.id, editedNote)\n        .then((notesData) => {\n            setNotes(notes.map(noteEl => noteEl.id === editedNote.id ? notesData : noteEl))\n        })\n        .catch(error => {\n            setErrorMessage(\n              `the note '${note.content}' was already deleted from server`\n            )\n            setTimeout(() => {\n                setErrorMessage(null)\n            }, 3000)\n            setNotes(notes.filter(n => n.id !== note.id))\n        })\n    }\n\n    return (\n      <div>\n          <Notification message={errorMessage} />\n        <h1>Notes</h1>\n        <ul>\n          {notesToShow.map((note) => (\n            <Note key={note.id} note={note} \n                toggleImportance={() => toggleImportance(note)}/>\n          ))}\n        </ul>\n        <button onClick={showSome} >{showAll ? \"show important\" : \"show all\"}</button>\n        <form onSubmit={addNote}>\n            <input value={newNote} onChange={handleChange} />\n            <button type=\"submit\">save</button>\n        </form>\n        <Footer></Footer>\n      </div>\n    )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"./index.css\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}